{% extends 'base.html.twig' %}

{% block title %}Commande{% endblock %}

{% block body %}
    <h1>Commande</h1>

    <table class="table">
        <tbody>
            <tr>
                <th>Id</th>
                <td>{{ order.id }}</td>
            </tr>
            <tr>
                <th>Référence</th>
                <td>{{ order.reference }}</td>
            </tr>
            <tr>
                <th>Facture</th>
                <td>{{ order.billreference }}</td>
            </tr>
            <tr>
                <th>Numéro de commande</th>
                <td>{{ order.ordernumber }}</td>
            </tr>
            <tr>
                <th>Livreur</th>
                <td id="assigned-carrier">
                    {% if order.carrier %}
                        {{ order.carrier.name }}
                    {% else %}
                        Aucun livreur affecté.
                    {% endif %}
                </td>
            </tr>
        </tbody>
    </table>


    <h2>Produits de la commande</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Nom du produit</th>
                <th>Quantité</th>
                <th>Prix unitaire</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            {% for product in order.orderProduct %}
                <tr>
                    <td>{{ product.product.title }}</td>
                    <td>{{ product.quantity }}</td>
                    <td>{{ product.product.prixVenteTtc|number_format(2, '.', ',') }} DT</td>
                    <td>{{ (product.product.prixVenteTtc * product.quantity)|number_format(2, '.', ',') }} DT</td>
                </tr>
            {% else %}
                <tr>
                    <td colspan="4">Aucun produit trouvé.</td>
                </tr>
            {% endfor %}
        </tbody>
    </table>

    {{ include('order/carrier.html.twig') }}


    <a href="{{ path('app_order_index') }}">Retour à la liste</a>

    {{ include('order/_delete_form.html.twig') }}


<script>
    document.addEventListener('DOMContentLoaded', function () {
        $('.custom-toggle-switch').change(function () {
            const orderId = $(this).data('id');
            const isChecked = $(this).prop('checked');

            // Vérification avant de permettre le changement
            if (!isChecked) {
                // Si on tente de désactiver, vérifier l'état actuel
                fetch(`/order/get-state/${orderId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest',
                    },
                })
                .then(response => response.json())
                .then(data => {
                    if (data.state === true) { // Commande acceptée
                        // Annuler le changement si l'état est déjà accepté
                        $(this).prop('checked', true); // Rendre le toggle actif
                        alert("Vous ne pouvez pas annuler cette commande une fois qu'elle est acceptée.");
                    } else {
                        // Effectuer le changement si l'état est non accepté
                        toggleState(orderId, 0);
                    }
                });
            } else {
                // Autoriser l'activation
                toggleState(orderId, 1);
            }
        });

        function toggleState(orderId, newState) {
            fetch(`/order/toggle/${orderId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest',
                },
                body: JSON.stringify({ state: newState }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    console.log('Order state updated successfully.');
                } else {
                    console.error('Error updating order state.');
                }
            });
        }
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
    const confirmButton = document.querySelector('#confirmationModal .btn-danger');

    confirmButton.addEventListener('click', function (event) {
        event.preventDefault();

        // Récupérer l'ID de la commande et du livreur sélectionné
        const orderId = {{ order.id }};
        const carrierId = document.querySelector('#carrier').value;

        // Envoi de la requête AJAX
        fetch(`/order/${orderId}/assign-carrier`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest',
            },
            body: JSON.stringify({ carrierId: carrierId }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Mettre à jour la cellule du livreur
                const carrierCell = document.querySelector('#assigned-carrier');
                carrierCell.textContent = data.carrierName;

                // Fermer la modale
                const modal = bootstrap.Modal.getInstance(document.querySelector('#confirmationModal'));
                modal.hide();
            } else {
                alert('Erreur lors de l\'affectation du livreur.');
            }
        })
        .catch(error => {
            console.error('Erreur:', error);
            alert('Une erreur s\'est produite lors de la communication avec le serveur.');
        });
    });
});
</script>
{% endblock %}
